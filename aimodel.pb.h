// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aimodel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aimodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aimodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aimodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aimodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aimodel_2eproto;
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Action_TrajPoint;
struct Action_TrajPointDefaultTypeInternal;
extern Action_TrajPointDefaultTypeInternal _Action_TrajPoint_default_instance_;
class Env;
struct EnvDefaultTypeInternal;
extern EnvDefaultTypeInternal _Env_default_instance_;
class Env_Entity;
struct Env_EntityDefaultTypeInternal;
extern Env_EntityDefaultTypeInternal _Env_Entity_default_instance_;
class Env_Entity_Dof;
struct Env_Entity_DofDefaultTypeInternal;
extern Env_Entity_DofDefaultTypeInternal _Env_Entity_Dof_default_instance_;
class Env_Entity_Velocity3D;
struct Env_Entity_Velocity3DDefaultTypeInternal;
extern Env_Entity_Velocity3DDefaultTypeInternal _Env_Entity_Velocity3D_default_instance_;
class Env_Goal;
struct Env_GoalDefaultTypeInternal;
extern Env_GoalDefaultTypeInternal _Env_Goal_default_instance_;
class Env_Missle;
struct Env_MissleDefaultTypeInternal;
extern Env_MissleDefaultTypeInternal _Env_Missle_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Action* Arena::CreateMaybeMessage<::Action>(Arena*);
template<> ::Action_TrajPoint* Arena::CreateMaybeMessage<::Action_TrajPoint>(Arena*);
template<> ::Env* Arena::CreateMaybeMessage<::Env>(Arena*);
template<> ::Env_Entity* Arena::CreateMaybeMessage<::Env_Entity>(Arena*);
template<> ::Env_Entity_Dof* Arena::CreateMaybeMessage<::Env_Entity_Dof>(Arena*);
template<> ::Env_Entity_Velocity3D* Arena::CreateMaybeMessage<::Env_Entity_Velocity3D>(Arena*);
template<> ::Env_Goal* Arena::CreateMaybeMessage<::Env_Goal>(Arena*);
template<> ::Env_Missle* Arena::CreateMaybeMessage<::Env_Missle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Env_Entity_Dof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Env.Entity.Dof) */ {
 public:
  inline Env_Entity_Dof() : Env_Entity_Dof(nullptr) {}
  ~Env_Entity_Dof() override;
  explicit constexpr Env_Entity_Dof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Env_Entity_Dof(const Env_Entity_Dof& from);
  Env_Entity_Dof(Env_Entity_Dof&& from) noexcept
    : Env_Entity_Dof() {
    *this = ::std::move(from);
  }

  inline Env_Entity_Dof& operator=(const Env_Entity_Dof& from) {
    CopyFrom(from);
    return *this;
  }
  inline Env_Entity_Dof& operator=(Env_Entity_Dof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Env_Entity_Dof& default_instance() {
    return *internal_default_instance();
  }
  static inline const Env_Entity_Dof* internal_default_instance() {
    return reinterpret_cast<const Env_Entity_Dof*>(
               &_Env_Entity_Dof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Env_Entity_Dof& a, Env_Entity_Dof& b) {
    a.Swap(&b);
  }
  inline void Swap(Env_Entity_Dof* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Env_Entity_Dof* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Env_Entity_Dof* New() const final {
    return new Env_Entity_Dof();
  }

  Env_Entity_Dof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Env_Entity_Dof>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Env_Entity_Dof& from);
  void MergeFrom(const Env_Entity_Dof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Env_Entity_Dof* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Env.Entity.Dof";
  }
  protected:
  explicit Env_Entity_Dof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kHeightFieldNumber = 3,
    kPhiFieldNumber = 4,
    kThetaFieldNumber = 5,
    kPsiFieldNumber = 6,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double phi = 4;
  void clear_phi();
  double phi() const;
  void set_phi(double value);
  private:
  double _internal_phi() const;
  void _internal_set_phi(double value);
  public:

  // double theta = 5;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // double psi = 6;
  void clear_psi();
  double psi() const;
  void set_psi(double value);
  private:
  double _internal_psi() const;
  void _internal_set_psi(double value);
  public:

  // @@protoc_insertion_point(class_scope:Env.Entity.Dof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lon_;
  double height_;
  double phi_;
  double theta_;
  double psi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Env_Entity_Velocity3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Env.Entity.Velocity3D) */ {
 public:
  inline Env_Entity_Velocity3D() : Env_Entity_Velocity3D(nullptr) {}
  ~Env_Entity_Velocity3D() override;
  explicit constexpr Env_Entity_Velocity3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Env_Entity_Velocity3D(const Env_Entity_Velocity3D& from);
  Env_Entity_Velocity3D(Env_Entity_Velocity3D&& from) noexcept
    : Env_Entity_Velocity3D() {
    *this = ::std::move(from);
  }

  inline Env_Entity_Velocity3D& operator=(const Env_Entity_Velocity3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Env_Entity_Velocity3D& operator=(Env_Entity_Velocity3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Env_Entity_Velocity3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Env_Entity_Velocity3D* internal_default_instance() {
    return reinterpret_cast<const Env_Entity_Velocity3D*>(
               &_Env_Entity_Velocity3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Env_Entity_Velocity3D& a, Env_Entity_Velocity3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Env_Entity_Velocity3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Env_Entity_Velocity3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Env_Entity_Velocity3D* New() const final {
    return new Env_Entity_Velocity3D();
  }

  Env_Entity_Velocity3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Env_Entity_Velocity3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Env_Entity_Velocity3D& from);
  void MergeFrom(const Env_Entity_Velocity3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Env_Entity_Velocity3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Env.Entity.Velocity3D";
  }
  protected:
  explicit Env_Entity_Velocity3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelNorthFieldNumber = 1,
    kVelEastFieldNumber = 2,
    kVelDownFieldNumber = 3,
  };
  // double vel_north = 1;
  void clear_vel_north();
  double vel_north() const;
  void set_vel_north(double value);
  private:
  double _internal_vel_north() const;
  void _internal_set_vel_north(double value);
  public:

  // double vel_east = 2;
  void clear_vel_east();
  double vel_east() const;
  void set_vel_east(double value);
  private:
  double _internal_vel_east() const;
  void _internal_set_vel_east(double value);
  public:

  // double vel_down = 3;
  void clear_vel_down();
  double vel_down() const;
  void set_vel_down(double value);
  private:
  double _internal_vel_down() const;
  void _internal_set_vel_down(double value);
  public:

  // @@protoc_insertion_point(class_scope:Env.Entity.Velocity3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double vel_north_;
  double vel_east_;
  double vel_down_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Env_Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Env.Entity) */ {
 public:
  inline Env_Entity() : Env_Entity(nullptr) {}
  ~Env_Entity() override;
  explicit constexpr Env_Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Env_Entity(const Env_Entity& from);
  Env_Entity(Env_Entity&& from) noexcept
    : Env_Entity() {
    *this = ::std::move(from);
  }

  inline Env_Entity& operator=(const Env_Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Env_Entity& operator=(Env_Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Env_Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Env_Entity* internal_default_instance() {
    return reinterpret_cast<const Env_Entity*>(
               &_Env_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Env_Entity& a, Env_Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Env_Entity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Env_Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Env_Entity* New() const final {
    return new Env_Entity();
  }

  Env_Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Env_Entity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Env_Entity& from);
  void MergeFrom(const Env_Entity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Env_Entity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Env.Entity";
  }
  protected:
  explicit Env_Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Env_Entity_Dof Dof;
  typedef Env_Entity_Velocity3D Velocity3D;

  // accessors -------------------------------------------------------

  enum : int {
    kDofFieldNumber = 1,
    kVelFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // .Env.Entity.Dof dof = 1;
  bool has_dof() const;
  private:
  bool _internal_has_dof() const;
  public:
  void clear_dof();
  const ::Env_Entity_Dof& dof() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Env_Entity_Dof* release_dof();
  ::Env_Entity_Dof* mutable_dof();
  void set_allocated_dof(::Env_Entity_Dof* dof);
  private:
  const ::Env_Entity_Dof& _internal_dof() const;
  ::Env_Entity_Dof* _internal_mutable_dof();
  public:
  void unsafe_arena_set_allocated_dof(
      ::Env_Entity_Dof* dof);
  ::Env_Entity_Dof* unsafe_arena_release_dof();

  // .Env.Entity.Velocity3D vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Env_Entity_Velocity3D& vel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Env_Entity_Velocity3D* release_vel();
  ::Env_Entity_Velocity3D* mutable_vel();
  void set_allocated_vel(::Env_Entity_Velocity3D* vel);
  private:
  const ::Env_Entity_Velocity3D& _internal_vel() const;
  ::Env_Entity_Velocity3D* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Env_Entity_Velocity3D* vel);
  ::Env_Entity_Velocity3D* unsafe_arena_release_vel();

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Env.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Env_Entity_Dof* dof_;
  ::Env_Entity_Velocity3D* vel_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Env_Missle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Env.Missle) */ {
 public:
  inline Env_Missle() : Env_Missle(nullptr) {}
  ~Env_Missle() override;
  explicit constexpr Env_Missle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Env_Missle(const Env_Missle& from);
  Env_Missle(Env_Missle&& from) noexcept
    : Env_Missle() {
    *this = ::std::move(from);
  }

  inline Env_Missle& operator=(const Env_Missle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Env_Missle& operator=(Env_Missle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Env_Missle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Env_Missle* internal_default_instance() {
    return reinterpret_cast<const Env_Missle*>(
               &_Env_Missle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Env_Missle& a, Env_Missle& b) {
    a.Swap(&b);
  }
  inline void Swap(Env_Missle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Env_Missle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Env_Missle* New() const final {
    return new Env_Missle();
  }

  Env_Missle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Env_Missle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Env_Missle& from);
  void MergeFrom(const Env_Missle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Env_Missle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Env.Missle";
  }
  protected:
  explicit Env_Missle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistFieldNumber = 2,
    kDirFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // double dist = 2;
  void clear_dist();
  double dist() const;
  void set_dist(double value);
  private:
  double _internal_dist() const;
  void _internal_set_dist(double value);
  public:

  // double dir = 3;
  void clear_dir();
  double dir() const;
  void set_dir(double value);
  private:
  double _internal_dir() const;
  void _internal_set_dir(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Env.Missle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dist_;
  double dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Env_Goal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Env.Goal) */ {
 public:
  inline Env_Goal() : Env_Goal(nullptr) {}
  ~Env_Goal() override;
  explicit constexpr Env_Goal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Env_Goal(const Env_Goal& from);
  Env_Goal(Env_Goal&& from) noexcept
    : Env_Goal() {
    *this = ::std::move(from);
  }

  inline Env_Goal& operator=(const Env_Goal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Env_Goal& operator=(Env_Goal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Env_Goal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Env_Goal* internal_default_instance() {
    return reinterpret_cast<const Env_Goal*>(
               &_Env_Goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Env_Goal& a, Env_Goal& b) {
    a.Swap(&b);
  }
  inline void Swap(Env_Goal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Env_Goal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Env_Goal* New() const final {
    return new Env_Goal();
  }

  Env_Goal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Env_Goal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Env_Goal& from);
  void MergeFrom(const Env_Goal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Env_Goal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Env.Goal";
  }
  protected:
  explicit Env_Goal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // @@protoc_insertion_point(class_scope:Env.Goal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lon_;
  double height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Env final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Env) */ {
 public:
  inline Env() : Env(nullptr) {}
  ~Env() override;
  explicit constexpr Env(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Env(const Env& from);
  Env(Env&& from) noexcept
    : Env() {
    *this = ::std::move(from);
  }

  inline Env& operator=(const Env& from) {
    CopyFrom(from);
    return *this;
  }
  inline Env& operator=(Env&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Env& default_instance() {
    return *internal_default_instance();
  }
  static inline const Env* internal_default_instance() {
    return reinterpret_cast<const Env*>(
               &_Env_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Env& a, Env& b) {
    a.Swap(&b);
  }
  inline void Swap(Env* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Env* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Env* New() const final {
    return new Env();
  }

  Env* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Env>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Env& from);
  void MergeFrom(const Env& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Env* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Env";
  }
  protected:
  explicit Env(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Env_Entity Entity;
  typedef Env_Missle Missle;
  typedef Env_Goal Goal;

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 6,
    kGoalFieldNumber = 8,
    kEnemyFieldNumber = 9,
    kMissleFieldNumber = 10,
    kRedCrashFieldNumber = 1,
    kBlueCrashFieldNumber = 2,
    kRadarOnFieldNumber = 3,
    kDetectEnemyFieldNumber = 4,
    kDetectMissleFieldNumber = 5,
    kNumWpnFieldNumber = 7,
  };
  // .Env.Entity self = 6;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::Env_Entity& self() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Env_Entity* release_self();
  ::Env_Entity* mutable_self();
  void set_allocated_self(::Env_Entity* self);
  private:
  const ::Env_Entity& _internal_self() const;
  ::Env_Entity* _internal_mutable_self();
  public:
  void unsafe_arena_set_allocated_self(
      ::Env_Entity* self);
  ::Env_Entity* unsafe_arena_release_self();

  // .Env.Goal goal = 8;
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;
  public:
  void clear_goal();
  const ::Env_Goal& goal() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Env_Goal* release_goal();
  ::Env_Goal* mutable_goal();
  void set_allocated_goal(::Env_Goal* goal);
  private:
  const ::Env_Goal& _internal_goal() const;
  ::Env_Goal* _internal_mutable_goal();
  public:
  void unsafe_arena_set_allocated_goal(
      ::Env_Goal* goal);
  ::Env_Goal* unsafe_arena_release_goal();

  // .Env.Entity enemy = 9;
  bool has_enemy() const;
  private:
  bool _internal_has_enemy() const;
  public:
  void clear_enemy();
  const ::Env_Entity& enemy() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Env_Entity* release_enemy();
  ::Env_Entity* mutable_enemy();
  void set_allocated_enemy(::Env_Entity* enemy);
  private:
  const ::Env_Entity& _internal_enemy() const;
  ::Env_Entity* _internal_mutable_enemy();
  public:
  void unsafe_arena_set_allocated_enemy(
      ::Env_Entity* enemy);
  ::Env_Entity* unsafe_arena_release_enemy();

  // .Env.Missle missle = 10;
  bool has_missle() const;
  private:
  bool _internal_has_missle() const;
  public:
  void clear_missle();
  const ::Env_Missle& missle() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Env_Missle* release_missle();
  ::Env_Missle* mutable_missle();
  void set_allocated_missle(::Env_Missle* missle);
  private:
  const ::Env_Missle& _internal_missle() const;
  ::Env_Missle* _internal_mutable_missle();
  public:
  void unsafe_arena_set_allocated_missle(
      ::Env_Missle* missle);
  ::Env_Missle* unsafe_arena_release_missle();

  // bool red_crash = 1;
  void clear_red_crash();
  bool red_crash() const;
  void set_red_crash(bool value);
  private:
  bool _internal_red_crash() const;
  void _internal_set_red_crash(bool value);
  public:

  // bool blue_crash = 2;
  void clear_blue_crash();
  bool blue_crash() const;
  void set_blue_crash(bool value);
  private:
  bool _internal_blue_crash() const;
  void _internal_set_blue_crash(bool value);
  public:

  // bool radar_on = 3;
  void clear_radar_on();
  bool radar_on() const;
  void set_radar_on(bool value);
  private:
  bool _internal_radar_on() const;
  void _internal_set_radar_on(bool value);
  public:

  // bool detect_enemy = 4;
  void clear_detect_enemy();
  bool detect_enemy() const;
  void set_detect_enemy(bool value);
  private:
  bool _internal_detect_enemy() const;
  void _internal_set_detect_enemy(bool value);
  public:

  // bool detect_missle = 5;
  void clear_detect_missle();
  bool detect_missle() const;
  void set_detect_missle(bool value);
  private:
  bool _internal_detect_missle() const;
  void _internal_set_detect_missle(bool value);
  public:

  // int32 num_wpn = 7;
  void clear_num_wpn();
  ::PROTOBUF_NAMESPACE_ID::int32 num_wpn() const;
  void set_num_wpn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_wpn() const;
  void _internal_set_num_wpn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Env)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Env_Entity* self_;
  ::Env_Goal* goal_;
  ::Env_Entity* enemy_;
  ::Env_Missle* missle_;
  bool red_crash_;
  bool blue_crash_;
  bool radar_on_;
  bool detect_enemy_;
  bool detect_missle_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_wpn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Action_TrajPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Action.TrajPoint) */ {
 public:
  inline Action_TrajPoint() : Action_TrajPoint(nullptr) {}
  ~Action_TrajPoint() override;
  explicit constexpr Action_TrajPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action_TrajPoint(const Action_TrajPoint& from);
  Action_TrajPoint(Action_TrajPoint&& from) noexcept
    : Action_TrajPoint() {
    *this = ::std::move(from);
  }

  inline Action_TrajPoint& operator=(const Action_TrajPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action_TrajPoint& operator=(Action_TrajPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action_TrajPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action_TrajPoint* internal_default_instance() {
    return reinterpret_cast<const Action_TrajPoint*>(
               &_Action_TrajPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Action_TrajPoint& a, Action_TrajPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Action_TrajPoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action_TrajPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action_TrajPoint* New() const final {
    return new Action_TrajPoint();
  }

  Action_TrajPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action_TrajPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action_TrajPoint& from);
  void MergeFrom(const Action_TrajPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action_TrajPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Action.TrajPoint";
  }
  protected:
  explicit Action_TrajPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kHFieldNumber = 3,
    kVelFieldNumber = 4,
    kRefPhiFieldNumber = 5,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lon = 2;
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // double h = 3;
  void clear_h();
  double h() const;
  void set_h(double value);
  private:
  double _internal_h() const;
  void _internal_set_h(double value);
  public:

  // double vel = 4;
  void clear_vel();
  double vel() const;
  void set_vel(double value);
  private:
  double _internal_vel() const;
  void _internal_set_vel(double value);
  public:

  // double ref_phi = 5;
  void clear_ref_phi();
  double ref_phi() const;
  void set_ref_phi(double value);
  private:
  double _internal_ref_phi() const;
  void _internal_set_ref_phi(double value);
  public:

  // @@protoc_insertion_point(class_scope:Action.TrajPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lon_;
  double h_;
  double vel_;
  double ref_phi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// -------------------------------------------------------------------

class Action final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  ~Action() override;
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return new Action();
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Action_TrajPoint TrajPoint;

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kIsResetFieldNumber = 1,
    kDeployFieldNumber = 3,
    kTargetIdFieldNumber = 4,
  };
  // .Action.TrajPoint point = 2;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::Action_TrajPoint& point() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Action_TrajPoint* release_point();
  ::Action_TrajPoint* mutable_point();
  void set_allocated_point(::Action_TrajPoint* point);
  private:
  const ::Action_TrajPoint& _internal_point() const;
  ::Action_TrajPoint* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::Action_TrajPoint* point);
  ::Action_TrajPoint* unsafe_arena_release_point();

  // bool isReset = 1;
  void clear_isreset();
  bool isreset() const;
  void set_isreset(bool value);
  private:
  bool _internal_isreset() const;
  void _internal_set_isreset(bool value);
  public:

  // bool deploy = 3;
  void clear_deploy();
  bool deploy() const;
  void set_deploy(bool value);
  private:
  bool _internal_deploy() const;
  void _internal_set_deploy(bool value);
  public:

  // int32 target_id = 4;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::int32 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Action_TrajPoint* point_;
  bool isreset_;
  bool deploy_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aimodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Env_Entity_Dof

// double lat = 1;
inline void Env_Entity_Dof::clear_lat() {
  lat_ = 0;
}
inline double Env_Entity_Dof::_internal_lat() const {
  return lat_;
}
inline double Env_Entity_Dof::lat() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Dof.lat)
  return _internal_lat();
}
inline void Env_Entity_Dof::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Env_Entity_Dof::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Dof.lat)
}

// double lon = 2;
inline void Env_Entity_Dof::clear_lon() {
  lon_ = 0;
}
inline double Env_Entity_Dof::_internal_lon() const {
  return lon_;
}
inline double Env_Entity_Dof::lon() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Dof.lon)
  return _internal_lon();
}
inline void Env_Entity_Dof::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Env_Entity_Dof::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Dof.lon)
}

// double height = 3;
inline void Env_Entity_Dof::clear_height() {
  height_ = 0;
}
inline double Env_Entity_Dof::_internal_height() const {
  return height_;
}
inline double Env_Entity_Dof::height() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Dof.height)
  return _internal_height();
}
inline void Env_Entity_Dof::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Env_Entity_Dof::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Dof.height)
}

// double phi = 4;
inline void Env_Entity_Dof::clear_phi() {
  phi_ = 0;
}
inline double Env_Entity_Dof::_internal_phi() const {
  return phi_;
}
inline double Env_Entity_Dof::phi() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Dof.phi)
  return _internal_phi();
}
inline void Env_Entity_Dof::_internal_set_phi(double value) {
  
  phi_ = value;
}
inline void Env_Entity_Dof::set_phi(double value) {
  _internal_set_phi(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Dof.phi)
}

// double theta = 5;
inline void Env_Entity_Dof::clear_theta() {
  theta_ = 0;
}
inline double Env_Entity_Dof::_internal_theta() const {
  return theta_;
}
inline double Env_Entity_Dof::theta() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Dof.theta)
  return _internal_theta();
}
inline void Env_Entity_Dof::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Env_Entity_Dof::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Dof.theta)
}

// double psi = 6;
inline void Env_Entity_Dof::clear_psi() {
  psi_ = 0;
}
inline double Env_Entity_Dof::_internal_psi() const {
  return psi_;
}
inline double Env_Entity_Dof::psi() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Dof.psi)
  return _internal_psi();
}
inline void Env_Entity_Dof::_internal_set_psi(double value) {
  
  psi_ = value;
}
inline void Env_Entity_Dof::set_psi(double value) {
  _internal_set_psi(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Dof.psi)
}

// -------------------------------------------------------------------

// Env_Entity_Velocity3D

// double vel_north = 1;
inline void Env_Entity_Velocity3D::clear_vel_north() {
  vel_north_ = 0;
}
inline double Env_Entity_Velocity3D::_internal_vel_north() const {
  return vel_north_;
}
inline double Env_Entity_Velocity3D::vel_north() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Velocity3D.vel_north)
  return _internal_vel_north();
}
inline void Env_Entity_Velocity3D::_internal_set_vel_north(double value) {
  
  vel_north_ = value;
}
inline void Env_Entity_Velocity3D::set_vel_north(double value) {
  _internal_set_vel_north(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Velocity3D.vel_north)
}

// double vel_east = 2;
inline void Env_Entity_Velocity3D::clear_vel_east() {
  vel_east_ = 0;
}
inline double Env_Entity_Velocity3D::_internal_vel_east() const {
  return vel_east_;
}
inline double Env_Entity_Velocity3D::vel_east() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Velocity3D.vel_east)
  return _internal_vel_east();
}
inline void Env_Entity_Velocity3D::_internal_set_vel_east(double value) {
  
  vel_east_ = value;
}
inline void Env_Entity_Velocity3D::set_vel_east(double value) {
  _internal_set_vel_east(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Velocity3D.vel_east)
}

// double vel_down = 3;
inline void Env_Entity_Velocity3D::clear_vel_down() {
  vel_down_ = 0;
}
inline double Env_Entity_Velocity3D::_internal_vel_down() const {
  return vel_down_;
}
inline double Env_Entity_Velocity3D::vel_down() const {
  // @@protoc_insertion_point(field_get:Env.Entity.Velocity3D.vel_down)
  return _internal_vel_down();
}
inline void Env_Entity_Velocity3D::_internal_set_vel_down(double value) {
  
  vel_down_ = value;
}
inline void Env_Entity_Velocity3D::set_vel_down(double value) {
  _internal_set_vel_down(value);
  // @@protoc_insertion_point(field_set:Env.Entity.Velocity3D.vel_down)
}

// -------------------------------------------------------------------

// Env_Entity

// .Env.Entity.Dof dof = 1;
inline bool Env_Entity::_internal_has_dof() const {
  return this != internal_default_instance() && dof_ != nullptr;
}
inline bool Env_Entity::has_dof() const {
  return _internal_has_dof();
}
inline void Env_Entity::clear_dof() {
  if (GetArenaForAllocation() == nullptr && dof_ != nullptr) {
    delete dof_;
  }
  dof_ = nullptr;
}
inline const ::Env_Entity_Dof& Env_Entity::_internal_dof() const {
  const ::Env_Entity_Dof* p = dof_;
  return p != nullptr ? *p : reinterpret_cast<const ::Env_Entity_Dof&>(
      ::_Env_Entity_Dof_default_instance_);
}
inline const ::Env_Entity_Dof& Env_Entity::dof() const {
  // @@protoc_insertion_point(field_get:Env.Entity.dof)
  return _internal_dof();
}
inline void Env_Entity::unsafe_arena_set_allocated_dof(
    ::Env_Entity_Dof* dof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dof_);
  }
  dof_ = dof;
  if (dof) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Env.Entity.dof)
}
inline ::Env_Entity_Dof* Env_Entity::release_dof() {
  
  ::Env_Entity_Dof* temp = dof_;
  dof_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Env_Entity_Dof* Env_Entity::unsafe_arena_release_dof() {
  // @@protoc_insertion_point(field_release:Env.Entity.dof)
  
  ::Env_Entity_Dof* temp = dof_;
  dof_ = nullptr;
  return temp;
}
inline ::Env_Entity_Dof* Env_Entity::_internal_mutable_dof() {
  
  if (dof_ == nullptr) {
    auto* p = CreateMaybeMessage<::Env_Entity_Dof>(GetArenaForAllocation());
    dof_ = p;
  }
  return dof_;
}
inline ::Env_Entity_Dof* Env_Entity::mutable_dof() {
  // @@protoc_insertion_point(field_mutable:Env.Entity.dof)
  return _internal_mutable_dof();
}
inline void Env_Entity::set_allocated_dof(::Env_Entity_Dof* dof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dof_;
  }
  if (dof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Env_Entity_Dof>::GetOwningArena(dof);
    if (message_arena != submessage_arena) {
      dof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dof, submessage_arena);
    }
    
  } else {
    
  }
  dof_ = dof;
  // @@protoc_insertion_point(field_set_allocated:Env.Entity.dof)
}

// .Env.Entity.Velocity3D vel = 2;
inline bool Env_Entity::_internal_has_vel() const {
  return this != internal_default_instance() && vel_ != nullptr;
}
inline bool Env_Entity::has_vel() const {
  return _internal_has_vel();
}
inline void Env_Entity::clear_vel() {
  if (GetArenaForAllocation() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
inline const ::Env_Entity_Velocity3D& Env_Entity::_internal_vel() const {
  const ::Env_Entity_Velocity3D* p = vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Env_Entity_Velocity3D&>(
      ::_Env_Entity_Velocity3D_default_instance_);
}
inline const ::Env_Entity_Velocity3D& Env_Entity::vel() const {
  // @@protoc_insertion_point(field_get:Env.Entity.vel)
  return _internal_vel();
}
inline void Env_Entity::unsafe_arena_set_allocated_vel(
    ::Env_Entity_Velocity3D* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Env.Entity.vel)
}
inline ::Env_Entity_Velocity3D* Env_Entity::release_vel() {
  
  ::Env_Entity_Velocity3D* temp = vel_;
  vel_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Env_Entity_Velocity3D* Env_Entity::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:Env.Entity.vel)
  
  ::Env_Entity_Velocity3D* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::Env_Entity_Velocity3D* Env_Entity::_internal_mutable_vel() {
  
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Env_Entity_Velocity3D>(GetArenaForAllocation());
    vel_ = p;
  }
  return vel_;
}
inline ::Env_Entity_Velocity3D* Env_Entity::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:Env.Entity.vel)
  return _internal_mutable_vel();
}
inline void Env_Entity::set_allocated_vel(::Env_Entity_Velocity3D* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Env_Entity_Velocity3D>::GetOwningArena(vel);
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Env.Entity.vel)
}

// int32 id = 3;
inline void Env_Entity::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Env_Entity::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Env_Entity::id() const {
  // @@protoc_insertion_point(field_get:Env.Entity.id)
  return _internal_id();
}
inline void Env_Entity::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Env_Entity::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Env.Entity.id)
}

// -------------------------------------------------------------------

// Env_Missle

// int32 id = 1;
inline void Env_Missle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Env_Missle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Env_Missle::id() const {
  // @@protoc_insertion_point(field_get:Env.Missle.id)
  return _internal_id();
}
inline void Env_Missle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Env_Missle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Env.Missle.id)
}

// double dist = 2;
inline void Env_Missle::clear_dist() {
  dist_ = 0;
}
inline double Env_Missle::_internal_dist() const {
  return dist_;
}
inline double Env_Missle::dist() const {
  // @@protoc_insertion_point(field_get:Env.Missle.dist)
  return _internal_dist();
}
inline void Env_Missle::_internal_set_dist(double value) {
  
  dist_ = value;
}
inline void Env_Missle::set_dist(double value) {
  _internal_set_dist(value);
  // @@protoc_insertion_point(field_set:Env.Missle.dist)
}

// double dir = 3;
inline void Env_Missle::clear_dir() {
  dir_ = 0;
}
inline double Env_Missle::_internal_dir() const {
  return dir_;
}
inline double Env_Missle::dir() const {
  // @@protoc_insertion_point(field_get:Env.Missle.dir)
  return _internal_dir();
}
inline void Env_Missle::_internal_set_dir(double value) {
  
  dir_ = value;
}
inline void Env_Missle::set_dir(double value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:Env.Missle.dir)
}

// -------------------------------------------------------------------

// Env_Goal

// double lat = 1;
inline void Env_Goal::clear_lat() {
  lat_ = 0;
}
inline double Env_Goal::_internal_lat() const {
  return lat_;
}
inline double Env_Goal::lat() const {
  // @@protoc_insertion_point(field_get:Env.Goal.lat)
  return _internal_lat();
}
inline void Env_Goal::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Env_Goal::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:Env.Goal.lat)
}

// double lon = 2;
inline void Env_Goal::clear_lon() {
  lon_ = 0;
}
inline double Env_Goal::_internal_lon() const {
  return lon_;
}
inline double Env_Goal::lon() const {
  // @@protoc_insertion_point(field_get:Env.Goal.lon)
  return _internal_lon();
}
inline void Env_Goal::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Env_Goal::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:Env.Goal.lon)
}

// double height = 3;
inline void Env_Goal::clear_height() {
  height_ = 0;
}
inline double Env_Goal::_internal_height() const {
  return height_;
}
inline double Env_Goal::height() const {
  // @@protoc_insertion_point(field_get:Env.Goal.height)
  return _internal_height();
}
inline void Env_Goal::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Env_Goal::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Env.Goal.height)
}

// -------------------------------------------------------------------

// Env

// bool red_crash = 1;
inline void Env::clear_red_crash() {
  red_crash_ = false;
}
inline bool Env::_internal_red_crash() const {
  return red_crash_;
}
inline bool Env::red_crash() const {
  // @@protoc_insertion_point(field_get:Env.red_crash)
  return _internal_red_crash();
}
inline void Env::_internal_set_red_crash(bool value) {
  
  red_crash_ = value;
}
inline void Env::set_red_crash(bool value) {
  _internal_set_red_crash(value);
  // @@protoc_insertion_point(field_set:Env.red_crash)
}

// bool blue_crash = 2;
inline void Env::clear_blue_crash() {
  blue_crash_ = false;
}
inline bool Env::_internal_blue_crash() const {
  return blue_crash_;
}
inline bool Env::blue_crash() const {
  // @@protoc_insertion_point(field_get:Env.blue_crash)
  return _internal_blue_crash();
}
inline void Env::_internal_set_blue_crash(bool value) {
  
  blue_crash_ = value;
}
inline void Env::set_blue_crash(bool value) {
  _internal_set_blue_crash(value);
  // @@protoc_insertion_point(field_set:Env.blue_crash)
}

// bool radar_on = 3;
inline void Env::clear_radar_on() {
  radar_on_ = false;
}
inline bool Env::_internal_radar_on() const {
  return radar_on_;
}
inline bool Env::radar_on() const {
  // @@protoc_insertion_point(field_get:Env.radar_on)
  return _internal_radar_on();
}
inline void Env::_internal_set_radar_on(bool value) {
  
  radar_on_ = value;
}
inline void Env::set_radar_on(bool value) {
  _internal_set_radar_on(value);
  // @@protoc_insertion_point(field_set:Env.radar_on)
}

// bool detect_enemy = 4;
inline void Env::clear_detect_enemy() {
  detect_enemy_ = false;
}
inline bool Env::_internal_detect_enemy() const {
  return detect_enemy_;
}
inline bool Env::detect_enemy() const {
  // @@protoc_insertion_point(field_get:Env.detect_enemy)
  return _internal_detect_enemy();
}
inline void Env::_internal_set_detect_enemy(bool value) {
  
  detect_enemy_ = value;
}
inline void Env::set_detect_enemy(bool value) {
  _internal_set_detect_enemy(value);
  // @@protoc_insertion_point(field_set:Env.detect_enemy)
}

// bool detect_missle = 5;
inline void Env::clear_detect_missle() {
  detect_missle_ = false;
}
inline bool Env::_internal_detect_missle() const {
  return detect_missle_;
}
inline bool Env::detect_missle() const {
  // @@protoc_insertion_point(field_get:Env.detect_missle)
  return _internal_detect_missle();
}
inline void Env::_internal_set_detect_missle(bool value) {
  
  detect_missle_ = value;
}
inline void Env::set_detect_missle(bool value) {
  _internal_set_detect_missle(value);
  // @@protoc_insertion_point(field_set:Env.detect_missle)
}

// .Env.Entity self = 6;
inline bool Env::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool Env::has_self() const {
  return _internal_has_self();
}
inline void Env::clear_self() {
  if (GetArenaForAllocation() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::Env_Entity& Env::_internal_self() const {
  const ::Env_Entity* p = self_;
  return p != nullptr ? *p : reinterpret_cast<const ::Env_Entity&>(
      ::_Env_Entity_default_instance_);
}
inline const ::Env_Entity& Env::self() const {
  // @@protoc_insertion_point(field_get:Env.self)
  return _internal_self();
}
inline void Env::unsafe_arena_set_allocated_self(
    ::Env_Entity* self) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Env.self)
}
inline ::Env_Entity* Env::release_self() {
  
  ::Env_Entity* temp = self_;
  self_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Env_Entity* Env::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_release:Env.self)
  
  ::Env_Entity* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::Env_Entity* Env::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::Env_Entity>(GetArenaForAllocation());
    self_ = p;
  }
  return self_;
}
inline ::Env_Entity* Env::mutable_self() {
  // @@protoc_insertion_point(field_mutable:Env.self)
  return _internal_mutable_self();
}
inline void Env::set_allocated_self(::Env_Entity* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Env_Entity>::GetOwningArena(self);
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:Env.self)
}

// int32 num_wpn = 7;
inline void Env::clear_num_wpn() {
  num_wpn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Env::_internal_num_wpn() const {
  return num_wpn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Env::num_wpn() const {
  // @@protoc_insertion_point(field_get:Env.num_wpn)
  return _internal_num_wpn();
}
inline void Env::_internal_set_num_wpn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_wpn_ = value;
}
inline void Env::set_num_wpn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_wpn(value);
  // @@protoc_insertion_point(field_set:Env.num_wpn)
}

// .Env.Goal goal = 8;
inline bool Env::_internal_has_goal() const {
  return this != internal_default_instance() && goal_ != nullptr;
}
inline bool Env::has_goal() const {
  return _internal_has_goal();
}
inline void Env::clear_goal() {
  if (GetArenaForAllocation() == nullptr && goal_ != nullptr) {
    delete goal_;
  }
  goal_ = nullptr;
}
inline const ::Env_Goal& Env::_internal_goal() const {
  const ::Env_Goal* p = goal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Env_Goal&>(
      ::_Env_Goal_default_instance_);
}
inline const ::Env_Goal& Env::goal() const {
  // @@protoc_insertion_point(field_get:Env.goal)
  return _internal_goal();
}
inline void Env::unsafe_arena_set_allocated_goal(
    ::Env_Goal* goal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goal_);
  }
  goal_ = goal;
  if (goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Env.goal)
}
inline ::Env_Goal* Env::release_goal() {
  
  ::Env_Goal* temp = goal_;
  goal_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Env_Goal* Env::unsafe_arena_release_goal() {
  // @@protoc_insertion_point(field_release:Env.goal)
  
  ::Env_Goal* temp = goal_;
  goal_ = nullptr;
  return temp;
}
inline ::Env_Goal* Env::_internal_mutable_goal() {
  
  if (goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Env_Goal>(GetArenaForAllocation());
    goal_ = p;
  }
  return goal_;
}
inline ::Env_Goal* Env::mutable_goal() {
  // @@protoc_insertion_point(field_mutable:Env.goal)
  return _internal_mutable_goal();
}
inline void Env::set_allocated_goal(::Env_Goal* goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete goal_;
  }
  if (goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Env_Goal>::GetOwningArena(goal);
    if (message_arena != submessage_arena) {
      goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    
  } else {
    
  }
  goal_ = goal;
  // @@protoc_insertion_point(field_set_allocated:Env.goal)
}

// .Env.Entity enemy = 9;
inline bool Env::_internal_has_enemy() const {
  return this != internal_default_instance() && enemy_ != nullptr;
}
inline bool Env::has_enemy() const {
  return _internal_has_enemy();
}
inline void Env::clear_enemy() {
  if (GetArenaForAllocation() == nullptr && enemy_ != nullptr) {
    delete enemy_;
  }
  enemy_ = nullptr;
}
inline const ::Env_Entity& Env::_internal_enemy() const {
  const ::Env_Entity* p = enemy_;
  return p != nullptr ? *p : reinterpret_cast<const ::Env_Entity&>(
      ::_Env_Entity_default_instance_);
}
inline const ::Env_Entity& Env::enemy() const {
  // @@protoc_insertion_point(field_get:Env.enemy)
  return _internal_enemy();
}
inline void Env::unsafe_arena_set_allocated_enemy(
    ::Env_Entity* enemy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enemy_);
  }
  enemy_ = enemy;
  if (enemy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Env.enemy)
}
inline ::Env_Entity* Env::release_enemy() {
  
  ::Env_Entity* temp = enemy_;
  enemy_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Env_Entity* Env::unsafe_arena_release_enemy() {
  // @@protoc_insertion_point(field_release:Env.enemy)
  
  ::Env_Entity* temp = enemy_;
  enemy_ = nullptr;
  return temp;
}
inline ::Env_Entity* Env::_internal_mutable_enemy() {
  
  if (enemy_ == nullptr) {
    auto* p = CreateMaybeMessage<::Env_Entity>(GetArenaForAllocation());
    enemy_ = p;
  }
  return enemy_;
}
inline ::Env_Entity* Env::mutable_enemy() {
  // @@protoc_insertion_point(field_mutable:Env.enemy)
  return _internal_mutable_enemy();
}
inline void Env::set_allocated_enemy(::Env_Entity* enemy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enemy_;
  }
  if (enemy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Env_Entity>::GetOwningArena(enemy);
    if (message_arena != submessage_arena) {
      enemy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enemy, submessage_arena);
    }
    
  } else {
    
  }
  enemy_ = enemy;
  // @@protoc_insertion_point(field_set_allocated:Env.enemy)
}

// .Env.Missle missle = 10;
inline bool Env::_internal_has_missle() const {
  return this != internal_default_instance() && missle_ != nullptr;
}
inline bool Env::has_missle() const {
  return _internal_has_missle();
}
inline void Env::clear_missle() {
  if (GetArenaForAllocation() == nullptr && missle_ != nullptr) {
    delete missle_;
  }
  missle_ = nullptr;
}
inline const ::Env_Missle& Env::_internal_missle() const {
  const ::Env_Missle* p = missle_;
  return p != nullptr ? *p : reinterpret_cast<const ::Env_Missle&>(
      ::_Env_Missle_default_instance_);
}
inline const ::Env_Missle& Env::missle() const {
  // @@protoc_insertion_point(field_get:Env.missle)
  return _internal_missle();
}
inline void Env::unsafe_arena_set_allocated_missle(
    ::Env_Missle* missle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(missle_);
  }
  missle_ = missle;
  if (missle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Env.missle)
}
inline ::Env_Missle* Env::release_missle() {
  
  ::Env_Missle* temp = missle_;
  missle_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Env_Missle* Env::unsafe_arena_release_missle() {
  // @@protoc_insertion_point(field_release:Env.missle)
  
  ::Env_Missle* temp = missle_;
  missle_ = nullptr;
  return temp;
}
inline ::Env_Missle* Env::_internal_mutable_missle() {
  
  if (missle_ == nullptr) {
    auto* p = CreateMaybeMessage<::Env_Missle>(GetArenaForAllocation());
    missle_ = p;
  }
  return missle_;
}
inline ::Env_Missle* Env::mutable_missle() {
  // @@protoc_insertion_point(field_mutable:Env.missle)
  return _internal_mutable_missle();
}
inline void Env::set_allocated_missle(::Env_Missle* missle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete missle_;
  }
  if (missle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Env_Missle>::GetOwningArena(missle);
    if (message_arena != submessage_arena) {
      missle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, missle, submessage_arena);
    }
    
  } else {
    
  }
  missle_ = missle;
  // @@protoc_insertion_point(field_set_allocated:Env.missle)
}

// -------------------------------------------------------------------

// Action_TrajPoint

// double lat = 1;
inline void Action_TrajPoint::clear_lat() {
  lat_ = 0;
}
inline double Action_TrajPoint::_internal_lat() const {
  return lat_;
}
inline double Action_TrajPoint::lat() const {
  // @@protoc_insertion_point(field_get:Action.TrajPoint.lat)
  return _internal_lat();
}
inline void Action_TrajPoint::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Action_TrajPoint::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:Action.TrajPoint.lat)
}

// double lon = 2;
inline void Action_TrajPoint::clear_lon() {
  lon_ = 0;
}
inline double Action_TrajPoint::_internal_lon() const {
  return lon_;
}
inline double Action_TrajPoint::lon() const {
  // @@protoc_insertion_point(field_get:Action.TrajPoint.lon)
  return _internal_lon();
}
inline void Action_TrajPoint::_internal_set_lon(double value) {
  
  lon_ = value;
}
inline void Action_TrajPoint::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:Action.TrajPoint.lon)
}

// double h = 3;
inline void Action_TrajPoint::clear_h() {
  h_ = 0;
}
inline double Action_TrajPoint::_internal_h() const {
  return h_;
}
inline double Action_TrajPoint::h() const {
  // @@protoc_insertion_point(field_get:Action.TrajPoint.h)
  return _internal_h();
}
inline void Action_TrajPoint::_internal_set_h(double value) {
  
  h_ = value;
}
inline void Action_TrajPoint::set_h(double value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:Action.TrajPoint.h)
}

// double vel = 4;
inline void Action_TrajPoint::clear_vel() {
  vel_ = 0;
}
inline double Action_TrajPoint::_internal_vel() const {
  return vel_;
}
inline double Action_TrajPoint::vel() const {
  // @@protoc_insertion_point(field_get:Action.TrajPoint.vel)
  return _internal_vel();
}
inline void Action_TrajPoint::_internal_set_vel(double value) {
  
  vel_ = value;
}
inline void Action_TrajPoint::set_vel(double value) {
  _internal_set_vel(value);
  // @@protoc_insertion_point(field_set:Action.TrajPoint.vel)
}

// double ref_phi = 5;
inline void Action_TrajPoint::clear_ref_phi() {
  ref_phi_ = 0;
}
inline double Action_TrajPoint::_internal_ref_phi() const {
  return ref_phi_;
}
inline double Action_TrajPoint::ref_phi() const {
  // @@protoc_insertion_point(field_get:Action.TrajPoint.ref_phi)
  return _internal_ref_phi();
}
inline void Action_TrajPoint::_internal_set_ref_phi(double value) {
  
  ref_phi_ = value;
}
inline void Action_TrajPoint::set_ref_phi(double value) {
  _internal_set_ref_phi(value);
  // @@protoc_insertion_point(field_set:Action.TrajPoint.ref_phi)
}

// -------------------------------------------------------------------

// Action

// bool isReset = 1;
inline void Action::clear_isreset() {
  isreset_ = false;
}
inline bool Action::_internal_isreset() const {
  return isreset_;
}
inline bool Action::isreset() const {
  // @@protoc_insertion_point(field_get:Action.isReset)
  return _internal_isreset();
}
inline void Action::_internal_set_isreset(bool value) {
  
  isreset_ = value;
}
inline void Action::set_isreset(bool value) {
  _internal_set_isreset(value);
  // @@protoc_insertion_point(field_set:Action.isReset)
}

// .Action.TrajPoint point = 2;
inline bool Action::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool Action::has_point() const {
  return _internal_has_point();
}
inline void Action::clear_point() {
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::Action_TrajPoint& Action::_internal_point() const {
  const ::Action_TrajPoint* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::Action_TrajPoint&>(
      ::_Action_TrajPoint_default_instance_);
}
inline const ::Action_TrajPoint& Action::point() const {
  // @@protoc_insertion_point(field_get:Action.point)
  return _internal_point();
}
inline void Action::unsafe_arena_set_allocated_point(
    ::Action_TrajPoint* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Action.point)
}
inline ::Action_TrajPoint* Action::release_point() {
  
  ::Action_TrajPoint* temp = point_;
  point_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Action_TrajPoint* Action::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:Action.point)
  
  ::Action_TrajPoint* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::Action_TrajPoint* Action::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::Action_TrajPoint>(GetArenaForAllocation());
    point_ = p;
  }
  return point_;
}
inline ::Action_TrajPoint* Action::mutable_point() {
  // @@protoc_insertion_point(field_mutable:Action.point)
  return _internal_mutable_point();
}
inline void Action::set_allocated_point(::Action_TrajPoint* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Action_TrajPoint>::GetOwningArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:Action.point)
}

// bool deploy = 3;
inline void Action::clear_deploy() {
  deploy_ = false;
}
inline bool Action::_internal_deploy() const {
  return deploy_;
}
inline bool Action::deploy() const {
  // @@protoc_insertion_point(field_get:Action.deploy)
  return _internal_deploy();
}
inline void Action::_internal_set_deploy(bool value) {
  
  deploy_ = value;
}
inline void Action::set_deploy(bool value) {
  _internal_set_deploy(value);
  // @@protoc_insertion_point(field_set:Action.deploy)
}

// int32 target_id = 4;
inline void Action::clear_target_id() {
  target_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::target_id() const {
  // @@protoc_insertion_point(field_get:Action.target_id)
  return _internal_target_id();
}
inline void Action::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_id_ = value;
}
inline void Action::set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Action.target_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aimodel_2eproto
